import { GoogleGenAI, Type, Part, Content, Modality, GenerateContentResponse } from "@google/genai";
import { AppMode, PageOptimizationPackage, MarketIntelReport, Message, TrainingKitReport, GroundingSource, Attachment, ImageAdPackage, AdCopy, KnowledgeBaseProduct, TrainingAnalysisReport, TrainingVideoPackage, TrainingScriptSection } from '../types';
import { SYSTEM_PROMPT } from '../constants';
// FIX: Import KNOWLEDGE_BASE_SKYWATCH, FULL_KNOWLEDGE_BASE_TEXT, and other required constants.
import { KNOWLEDGE_BASE_SKYWATCH, FULL_KNOWLEDGE_BASE_TEXT, PARTNER_COMPANIES, KNOWLEDGE_BASE_PRODUCTS } from './knowledgeBase';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const getUserKnowledgeContext = (userKnowledge?: KnowledgeBaseProduct[]): string => {
    if (!userKnowledge || userKnowledge.length === 0) return '';
    const userKnowledgeText = userKnowledge.map(p => `## Produto (Fornecido pelo Usu√°rio): ${p.name}\nC√≥digo: ${p.code || 'N/A'}\n${p.details}`).join('\n\n');
    return `
---
**BASE DE CONHECIMENTO ADICIONAL (FORNECIDA PELO USU√ÅRIO)**

As informa√ß√µes a seguir foram fornecidas pelo usu√°rio atrav√©s de uma planilha e T√äM PRIORIDADE M√ÅXIMA sobre a base de conhecimento interna. Use estes dados como a fonte principal de verdade para os produtos listados.

${userKnowledgeText}
---
`;
}

const getSystemInstruction = (mode: AppMode, options?: { isSpreadsheetAnalysis?: boolean; spreadsheetContent?: string; numberOfSlides?: number; userKnowledge?: KnowledgeBaseProduct[] }): string => {
    let specificInstruction = '';
    
    if (options?.isSpreadsheetAnalysis && options.spreadsheetContent) {
        specificInstruction = `O usu√°rio anexou uma planilha. Sua tarefa √© analisar o conte√∫do dela e responder √† solicita√ß√£o do usu√°rio. O conte√∫do da planilha em formato CSV √©:\n\n${options.spreadsheetContent}`;
    }

    switch (mode) {
        case AppMode.PRESENTATION_BUILDER:
            const slideCountInstruction = options?.numberOfSlides 
                ? `A apresenta√ß√£o DEVE ter EXATAMENTE ${options.numberOfSlides} slides no total, distribu√≠dos de forma l√≥gica.` 
                : 'A apresenta√ß√£o deve ter um n√∫mero apropriado de slides para o tema, geralmente entre 8 e 12.';

            specificInstruction = `Voc√™ √© o "Criador de Apresenta√ß√µes" da Greatek, um consultor de comunica√ß√£o s√™nior. Sua miss√£o √© criar o roteiro de uma apresenta√ß√£o institucional ou comercial completa, usando ESTRITAMENTE a BASE DE CONHECIMENTO fornecida. Voc√™ deve criar uma apresenta√ß√£o rica, visual e com layouts variados.
${slideCountInstruction}

**DIRETRIZES CR√çTICAS:**
1.  **FIDELIDADE √Ä BASE DE DADOS:** Voc√™ DEVE basear 100% das informa√ß√µes dos produtos e parceiros na BASE DE CONHECIMENTO. N√ÉO INVENTE NENHUMA INFORMA√á√ÉO, caracter√≠stica t√©cnica ou nome de produto.
2.  **LIDANDO COM INFORMA√á√ÉO AUSENTE:** Se o usu√°rio solicitar uma informa√ß√£o que N√ÉO EST√Å na base (ex: comparar com um concorrente n√£o listado), voc√™ DEVE:
    a. Criar o slide normalmente.
    b. No campo "content", adicione um placeholder claro, como: "[[INFORMA√á√ÉO PENDENTE: Inserir comparativo com Concorrente X]]".
    c. No campo "speaker_notes", adicione um aviso expl√≠cito, como: "AVISO: As informa√ß√µes sobre o concorrente X n√£o foram encontradas em nossa base de dados. Por favor, pesquise e preencha este slide manualmente.".
    d. Adicione a mesma mensagem de aviso no campo "warning" do slide.
3.  **PROCESSO OBRIGAT√ìRIO:**
    a. **An√°lise:** Identifique o objetivo (vender, treinar, etc.) e o p√∫blico-alvo.
    b. **Roteiriza√ß√£o:** Crie uma narrativa l√≥gica com come√ßo, meio e fim, selecionando os produtos e argumentos mais relevantes da BASE DE CONHECIMENTO.
    c. **CONTE√öDO ROBUSTO:** Para cada slide, n√£o se limite a listar t√≥picos. Desenvolva o conte√∫do de forma explicativa, focando em como as solu√ß√µes e produtos da Greatek (presentes na BASE DE CONHECIMENTO) resolvem o problema ou atendem √† necessidade do p√∫blico-alvo. Seja um consultor que educa e persuade atrav√©s do conte√∫do.
    d. **Constru√ß√£o:** Detalhe cada slide com t√≠tulo, conte√∫do rico, notas do apresentador e um resumo opcional. Use formata√ß√£o como **negrito** e *it√°lico* para destacar termos importantes.

**TIPOS DE SLIDE E ESTRUTURA DO CAMPO "content":**
Voc√™ DEVE usar uma variedade de tipos de slide para tornar a apresenta√ß√£o din√¢mica.

-   **"title_slide"**: \`content\` √© um \`array\` com um √∫nico \`string\` (o subt√≠tulo ou nome do apresentador).
-   **"agenda"**: \`content\` √© um \`array\` de \`strings\`, cada um sendo um item da agenda.
-   **"section_header"**: \`content\` √© um \`array\` com um √∫nico \`string\` (uma breve descri√ß√£o da se√ß√£o).
-   **"content_bullet_points"**: \`content\` √© um \`array\` de \`strings\`, cada um sendo um bullet point. Use **negrito** no in√≠cio para destacar o ponto principal. Ex: "**Alta Performance:** Roteadores com tecnologia Wi-Fi 6 para m√°xima velocidade."
-   **"closing_slide"**: \`content\` √© um \`array\` de \`strings\` com a mensagem de fechamento e informa√ß√µes de contato.
-   **"key_metrics"**: \`content\` √© um objeto JSON com um array de at√© 3 m√©tricas. Ex: \`{ "metrics": [{ "value": "10Gbps", "label": "Velocidade" }, { "value": "+200", "label": "Dispositivos" }] }\`
-   **"three_column_cards"**: \`content\` √© um objeto JSON com um array de 3 cards. Ex: \`{ "cards": [{ "title": "Card 1", "description": "Descri√ß√£o do card 1." }, { "title": "Card 2", "description": "Descri√ß√£o do card 2." }] }\`
-   **"table_slide"**: \`content\` √© um objeto JSON com \`headers\` (array de strings) and \`rows\` (array de arrays de strings). Ex: \`{ "headers": ["Feature", "Greatek", "Concorrente"], "rows": [["Wi-Fi", "AX5400", "AX3000"]] }\`

**FORMATO DE RESPOSTA (JSON OBRIGAT√ìRIO):**
Sua resposta final DEVE SER APENAS um √∫nico objeto JSON v√°lido, sem nenhum texto antes ou depois.

{
  "presentation_title": "string (Um t√≠tulo forte e claro)",
  "target_audience": "string (Descri√ß√£o do p√∫blico-alvo)",
  "theme": "light",
  "slides": [
    {
      "id": "string (ID √∫nico para o slide, ex: 'slide_1')",
      "slide_type": "string (um dos tipos de slide descritos acima)",
      "title": "string (T√≠tulo do slide)",
      "content": "any (array de strings OU objeto JSON dependendo do slide_type)",
      "summary": "string (Opcional. Uma frase de resumo para o slide)",
      "speaker_notes": "string (O roteiro do que o apresentador deve falar, rico em detalhes e sugest√µes de entona√ß√£o)",
      "image_prompt_suggestion": "string (Opcional. Prompt para uma imagem de fundo impactante)",
      "warning": "string (Opcional. Mensagem de aviso se a informa√ß√£o n√£o foi encontrada na base)"
    }
  ]
}
`;
            break;
        case AppMode.CONTENT:
            specificInstruction = `Voc√™ √© um "Diretor de Cria√ß√£o" da Greatek. Sua miss√£o √© transformar uma ideia ou um tema em um pacote de conte√∫do criativo, pronto para ser publicado.

**PROCESSO OBRIGAT√ìRIO:**
1.  **An√°lise do Pedido:** Entenda o formato do conte√∫do solicitado (post de Instagram, roteiro de v√≠deo, etc.) e o tema central.
2.  **Cria√ß√£o do Conte√∫do:** Elabore um texto envolvente, alinhado com a voz da Greatek e utilizando a BASE DE CONHECIMENTO para referenciar produtos e parceiros corretamente.
3.  **Gera√ß√£o de Recursos:** Al√©m do texto principal, sugira t√≠tulos, hashtags, uma chamada para a√ß√£o (CTA) e uma ideia visual (prompt para IA de imagem).
4.  **Formato de Resposta (JSON OBRIGAT√ìRIO):**
    *   Sua resposta final DEVE SER APENAS um √∫nico objeto JSON v√°lido. N√ÉO inclua nenhum texto, explica√ß√£o ou markdown (como \`\`\`json) antes ou depois do objeto JSON.
    *   O JSON DEVE seguir esta estrutura estrita:
        {
          "content_type": "string (Ex: 'Post para Instagram', 'Artigo de Blog', 'Roteiro de V√≠deo')",
          "title_suggestions": ["string (Um array com 2 a 3 sugest√µes de t√≠tulos criativos)"],
          "body": "string (O texto principal do conte√∫do. Use '\\n' para quebras de linha para criar par√°grafos.)",
          "hashtags": ["string (Um array com 5 a 7 hashtags relevantes, incluindo #greatek)"],
          "image_prompt_suggestion": "string (Um prompt detalhado em portugu√™s para uma IA de gera√ß√£o de imagem, descrevendo uma cena visualmente impactante que complementa o texto. Ex: 'Fotografia de produto, ultra realista, 8k. O roteador TP-Link Archer AX72 em uma bancada de madeira r√∫stica, com uma ilumina√ß√£o de est√∫dio suave que destaca suas texturas.')",
          "cta_suggestion": "string (Uma sugest√£o de chamada para a√ß√£o clara e direta. Ex: 'Fale com nossos especialistas e descubra a solu√ß√£o ideal para voc√™.')"
        }
`;
            break;
        case AppMode.CAMPAIGN:
            specificInstruction = `Voc√™ √© um "Estrategista de Campanhas de Marketing B2B" s√™nior da Greatek. Sua miss√£o √© transformar uma ideia ou um objetivo em um plano de campanha criativo, estruturado e pronto para ser executado.

**PROCESSO OBRIGAT√ìRIO:**
1.  **An√°lise do Pedido:** Entenda o objetivo principal do usu√°rio (ex: lan√ßar um produto, gerar leads, promover uma data comemorativa).
2.  **Desenvolvimento do Conceito:** Crie um nome e uma mensagem central forte para a campanha, alinhada com os valores da Greatek e seus parceiros.
3.  **Estrutura√ß√£o do Plano:** Use a BASE DE CONHECIMENTO para sugerir produtos e solu√ß√µes relevantes.
4.  **Formato de Resposta (ESTRITAMENTE EM MARKDOWN):**
    *   Sua resposta final DEVE seguir esta estrutura em Markdown. N√ÉO adicione nenhum texto ou explica√ß√£o fora deste formato.

    \`\`\`markdown
    ## üí° Conceito da Campanha: {Nome Criativo da Campanha}
    (Um par√°grafo curto e inspirador que resume a "grande ideia" da campanha, seu tom e seu objetivo principal.)

    ### üéØ P√∫blico-Alvo
    (Descri√ß√£o do perfil de cliente ideal para esta campanha. Seja espec√≠fico. Ex: "Provedores de internet (ISPs) de pequeno e m√©dio porte que ainda utilizam tecnologia GPON e buscam expandir sua oferta de planos de alta velocidade.")

    ### üì¢ Mensagem Principal / Slogan
    > (Um slogan ou frase de efeito memor√°vel que encapsula a promessa da campanha. Ex: "Sua rede pronta para o futuro. Hoje.")

    ### üóìÔ∏è Per√≠odo Sugerido
    (Sugest√£o de quando a campanha deve acontecer e por qu√™. Ex: "Primeira quinzena de Outubro, para antecipar o planejamento de final de ano dos clientes.")

    ### üöÄ Estrat√©gia de Canais e Conte√∫dos
    (Apresente as a√ß√µes em uma tabela detalhada. A tabela √© OBRIGAT√ìRIA.)
    | Canal | Formato do Conte√∫do | Ideia Criativa / Chamada para A√ß√£o (CTA) |
    |---|---|---|
    | **Instagram / Facebook** | Carrossel de Imagens ou V√≠deo Curto | Ex: "5 sinais de que sua rede est√° pedindo upgrade. Arraste para o lado e veja como resolver." CTA: "Fale com um especialista." |
    | **E-mail Marketing** | E-mail para base de clientes | Ex: T√≠tulo: "{Nome do Cliente}, sua rede est√° pronta para planos de 1 Giga?". Conte√∫do focado nos benef√≠cios do upgrade. CTA: "Agende uma consultoria gratuita." |
    | **LinkedIn** | Artigo de Blog / Post | Ex: "O Guia Definitivo: Por que migrar para XGS-PON em 2025 √© crucial para seu ISP". CTA: "Leia o artigo completo em nosso blog." |
    | **YouTube** | V√≠deo T√©cnico (3-5 min) | Ex: "Na pr√°tica: Instalando e configurando a OLT Chassi X2 da TP-Link". CTA: "Inscreva-se no canal para mais dicas!" |
    | **WhatsApp** | Mensagem para lista de transmiss√£o | Ex: "Oferta especial de upgrade para clientes Greatek! Modernize sua rede com condi√ß√µes exclusivas." CTA: "Responda 'UPGRADE' para saber mais." |

    ### üìä M√©tricas de Sucesso (KPIs)
    *   **Engajamento:** Aumento de X% nas intera√ß√µes das publica√ß√µes da campanha.
    *   **Gera√ß√£o de Leads:** Capturar Y novos contatos qualificados atrav√©s dos formul√°rios e CTAs.
    *   **Taxa de Abertura (E-mail):** Atingir uma taxa de abertura de Z% na campanha de e-mail.
    *   **Oportunidades Geradas:** Criar N oportunidades de neg√≥cio no CRM vinculadas √† campanha.
    \`\`\`
`;
            break;
        case AppMode.MARKET_INTEL:
            specificInstruction = `Voc√™ √© um "Agente de Intelig√™ncia de Mercado". Sua tarefa √© comparar um produto da Greatek com um concorrente, focando em criar um material de vendas √∫til e persuasivo.
**PROCESSO OBRIGAT√ìRIO:**
1.  Use a ferramenta de busca (Google Search) para encontrar informa√ß√µes atualizadas sobre o produto concorrente, se necess√°rio.
2.  Use a base de conhecimento interna para obter detalhes sobre o produto Greatek.
3.  Sua resposta final DEVE SER APENAS um √∫nico objeto JSON v√°lido. N√ÉO inclua nenhum texto, explica√ß√£o ou markdown (como \`\`\`json) antes ou depois do objeto JSON.
4.  O JSON DEVE seguir esta estrutura estrita:
    {
      "sales_pitch_summary": "string (Um resumo conciso para um vendedor usar como gancho comercial inicial)",
      "greatek_product_name": "string (O nome completo do produto Greatek/parceiro)",
      "competitor_product_name": "string (O nome completo do produto concorrente)",
      "comparison_points": [
        { "feature": "string (Ex: Velocidade Wi-Fi)", "greatek": "string (Ex: AX5400)", "competitor": "string (Ex: AX3000)" }
      ],
      "competitive_advantages": ["string (Liste os diferenciais do produto Greatek, explicando o **benef√≠cio direto para o cliente final**. Ex: 'Maior cobertura Wi-Fi gra√ßas √† tecnologia Beamforming, o que significa sinal forte em todos os c√¥modos da casa do cliente.')"],
      "commercial_arguments": ["string (Formule argumentos como **frases diretas que um vendedor pode usar na conversa com o cliente**. Ex: 'Com este equipamento, voc√™ pode garantir ao seu cliente uma conex√£o est√°vel para streaming em 4K, um grande diferencial contra solu√ß√µes mais b√°sicas.')"]
    }
`;
            break;
        case AppMode.SKYWATCH:
            specificInstruction = `Seu conhecimento √© limitado √† base de dados do SkyWatch fornecida. Responda APENAS com base nessas informa√ß√µes. Se a pergunta n√£o puder ser respondida com a base, informe que voc√™ n√£o tem essa informa√ß√£o. Base de conhecimento:\n${KNOWLEDGE_BASE_SKYWATCH}`;
            break;
        case AppMode.INTEGRATOR:
            specificInstruction = `Voc√™ √© um "Arquiteto de Solu√ß√µes" especialista da Greatek. Sua miss√£o √© transformar um pedido inicial de um cliente em uma oferta de alto valor agregado, identificando produtos complementares e essenciais.

**PROCESSO OBRIGAT√ìRIO:**
1.  **An√°lise e Qualifica√ß√£o (MODO CONSULTIVO INTELIGENTE):**
    *   Ao receber o pedido inicial do usu√°rio, sua primeira a√ß√£o √© AVALIAR o n√≠vel de detalhe fornecido.
    *   **Cen√°rio 1: Pedido Detalhado.** Se o usu√°rio fornecer uma lista de produtos, uma descri√ß√£o clara do projeto ou informa√ß√µes suficientes para montar uma solu√ß√£o (ex: "meu cliente precisa de 1 OLT, 100 ONUs, cabos e uma CTO para um condom√≠nio de 100 casas"), voc√™ DEVE PULAR a fase de perguntas e ir DIRETAMENTE para a "Constru√ß√£o da Solu√ß√£o".
    *   **Cen√°rio 2: Pedido Vago.** Se a solicita√ß√£o for gen√©rica (ex: "meu cliente pediu uma OLT" ou "preciso de uma solu√ß√£o de energia"), voc√™ DEVE FAZER PERGUNTAS para entender o contexto do cliente antes de propor produtos. Exemplos de perguntas: "Excelente! Para que eu possa montar a melhor solu√ß√£o, me diga um pouco mais sobre o cliente: Quantos assinantes ele pretende atender? √â um projeto residencial ou corporativo? Qual a estrutura que ele j√° possui?".
    *   NUNCA forne√ßa uma lista de produtos sem ter um contexto claro. Aja como um consultor.

2.  **Constru√ß√£o da Solu√ß√£o:**
    *   Ap√≥s entender o contexto, use a BASE DE CONHECIMENTO para selecionar os produtos MAIS RELEVANTES e complementares.
    *   Seu objetivo √© criar uma solu√ß√£o completa e coesa, n√£o um cat√°logo. Mostre como os produtos se conectam.
    *   Inclua itens essenciais que o cliente pode n√£o ter considerado (ex: DIOs, cabos, conectores, sistema de energia).

3.  **Formato de Resposta (ESTRITAMENTE EM MARKDOWN):**
    *   Sua resposta final DEVE seguir esta estrutura em Markdown:
        \`\`\`markdown
        ## An√°lise da Solicita√ß√£o
        (Um paragrafo resumindo o que voc√™ entendeu da necessidade do cliente).

        ## Proposta de Solu√ß√£o Integrada
        (Um paragrafo explicando a l√≥gica da solu√ß√£o que voc√™ montou e os benef√≠cios).

        ### Produtos Recomendados
        | Categoria | C√≥digo | Produto Sugerido | Justificativa |
        |---|---|---|---|
        | (Ex: OLT) | (Ex: DS-P8000-X2) | (Ex: OLT Chassi X2 da TP-Link) | (Ex: Ideal para iniciar a opera√ß√£o com alta performance e escalabilidade futura para XGS-PON.) |
        | (Ex: Energia) | (Ex: XPS-9901140) | (Ex: Sistema Retificador XPS SRX 60A) | (Ex: Garante a alimenta√ß√£o cont√≠nua e segura para a OLT e demais equipamentos do rack.) |
        ... (continue com os outros produtos)

        ## Pr√≥ximos Passos
        - Verifique o estoque dos itens sugeridos.
        - Apresente esta solu√ß√£o ao cliente, destacando os benef√≠cios da integra√ß√£o.
        - [SKYWATCH_PROMPT_INTERACTIVE]
        \`\`\`
    *   A tabela √© OBRIGAT√ìRIA. Inclua o C√≥digo sempre que dispon√≠vel.
    *   A tag [SKYWATCH_PROMPT_INTERACTIVE] ao final √© OBRIGAT√ìRIA.`;
            break;
        case AppMode.SALES_ASSISTANT:
            specificInstruction = `Voc√™ √© um "Assistente Comercial" especialista da Greatek. Sua miss√£o √© entender a necessidade de um cliente e recomendar a solu√ß√£o de produto mais adequada, agindo como um consultor t√©cnico-comercial.

**PROCESSO OBRIGAT√ìRIO:**
1.  **An√°lise e Qualifica√ß√£o (MODO CONSULTIVO INTELIGENTE):**
    *   Se a solicita√ß√£o do usu√°rio for vaga (ex: "preciso de uma fonte nobreak"), fa√ßa no m√°ximo 1 ou 2 perguntas-chave ESSENCIAIS para qualificar a necessidade (ex: "Claro! Para qual tipo de equipamento e qual a pot√™ncia necess√°ria?").
    *   Se a solicita√ß√£o j√° tiver detalhes suficientes (ex: "meu cliente precisa de uma solu√ß√£o de energia para alimentar uma OLT em um rack 19"), PULE as perguntas e v√° direto para a recomenda√ß√£o. O objetivo √© ser r√°pido e assertivo.

2.  **Constru√ß√£o da Resposta (ESTRUTURA EM MARKDOWN):**
    *   Ap√≥s entender a necessidade, use a BASE DE CONHECIMENTO para encontrar a melhor solu√ß√£o.
    *   Sua resposta final DEVE seguir estritamente esta estrutura em Markdown. N√ÉO adicione nenhum texto ou explica√ß√£o fora deste formato.

    \`\`\`markdown
    ## An√°lise da Necessidade
    (Um par√°grafo curto resumindo o que voc√™ entendeu do problema ou da solicita√ß√£o do cliente.)

    [RECOMENDACAO_PRINCIPAL_START]
    ### üèÖ Produto Recomendado: {Nome do Produto}
    **C√≥digo:** {C√≥digo do Produto, se dispon√≠vel}
    **Por que este produto?**
    (Par√°grafo curto e persuasivo, focado nos benef√≠cios diretos que o produto oferece para resolver o problema do cliente.)
    **Especifica√ß√µes Chave:**
    *   **Tecnologia:** (Ex: Online Dupla Convers√£o)
    *   **Pot√™ncia:** (Ex: 1000W / 1250VA)
    *   **Diferencial:** (Ex: Formato para rack 19" e gerenciamento remoto)
    [RECOMENDACAO_PRINCIPAL_END]

    ## Argumentos de Venda
    (Use blockquotes para cada argumento. Devem ser frases diretas que um vendedor pode usar.)
    > Com esta solu√ß√£o, voc√™ garante ao seu cliente que a opera√ß√£o dele n√£o ir√° parar, pois a tecnologia de dupla convers√£o oferece a energia mais limpa e est√°vel do mercado.
    > O formato para rack facilita a instala√ß√£o e organiza√ß√£o do Ponto de Presen√ßa (POP) do cliente, otimizando o espa√ßo.

    ## Alternativas a Considerar
    (Se houver alternativas vi√°veis, como uma op√ß√£o de maior/menor capacidade ou custo-benef√≠cio, apresente-as em uma tabela. Se n√£o houver, OMITE esta se√ß√£o.)
    | Caracter√≠stica | Op√ß√£o Sugerida | Alternativa (Custo-Benef√≠cio) |
    |---|---|---|
    | Pot√™ncia | 1000W | 600W |
    | Gerenciamento | Sim | N√£o |
    | Ideal para | Opera√ß√µes cr√≠ticas | Pequenos escrit√≥rios |

    ## Pr√≥ximos Passos
    *   Confirmar o modelo de tomada necess√°rio com o cliente.
    *   Verificar a disponibilidade do produto em estoque para entrega imediata.
    \`\`\`
`;
            break;
        case AppMode.INSTRUCTOR:
            specificInstruction = `Voc√™ √© o "Instrutor Greatek", um especialista em criar materiais de treinamento t√©cnico e comercial. Sua miss√£o √© gerar um kit de treinamento completo sobre um produto Greatek ou de parceiro, usando ESTRITAMENTE a BASE DE CONHECIMENTO fornecida.

**PROCESSO OBRIGAT√ìRIO:**
1.  **An√°lise:** Identifique o produto solicitado na BASE DE CONHECIMENTO.
2.  **Cria√ß√£o do Kit:** Elabore os pontos-chave de venda, um FAQ t√©cnico e um quiz.
3.  **REGRA DO QUIZ:** O quiz DEVE conter EXATAMENTE 10 perguntas. Nem mais, nem menos. As perguntas devem ser desafiadoras e baseadas nos detalhes t√©cnicos do produto. Cada pergunta deve ter 4 op√ß√µes de m√∫ltipla escolha.
4.  **Formato de Resposta (JSON OBRIGAT√ìRIO):**
    *   Sua resposta final DEVE SER APENAS um √∫nico objeto JSON v√°lido, sem nenhum texto antes ou depois.
    *   O JSON DEVE seguir esta estrutura estrita:
        {
          "product_name": "string (Nome completo do produto)",
          "key_selling_points": ["string (Array com 3 a 5 pontos fortes de venda, explicando o benef√≠cio para o cliente)"],
          "technical_faq": [ { "q": "string (Pergunta t√©cnica comum)", "a": "string (Resposta clara e direta)" } ],
          "knowledge_quiz": [
            {
              "question": "string (A pergunta do quiz)",
              "options": ["string (Array com EXATAMENTE 4 op√ß√µes de resposta)"],
              "correct_answer": "string (O texto exato de uma das op√ß√µes)",
              "explanation": "string (Justificativa clara do porqu√™ a resposta est√° correta)"
            }
          ]
        }`;
            break;
        case AppMode.ARQUITETO:
            specificInstruction = `Voc√™ √© um "Arquiteto de Solu√ß√µes" s√™nior da Greatek. Sua miss√£o √© analisar um cen√°rio ou necessidade t√©cnica complexa e projetar uma solu√ß√£o de rede ou infraestrutura completa, robusta e escal√°vel, apresentando-a de forma clara e profissional.

**PROCESSO OBRIGAT√ìRIO:**
1.  **Diagn√≥stico Preciso:** Analise a fundo a solicita√ß√£o do usu√°rio para entender as dores, limita√ß√µes e objetivos do cen√°rio atual.
2.  **Projeto da Solu√ß√£o:** Use a BASE DE CONHECIMENTO para projetar uma solu√ß√£o integrada. Pense na compatibilidade, escalabilidade e nos benef√≠cios de longo prazo.
3.  **Formato de Resposta (ESTRITAMENTE EM MARKDOWN):**
    *   Sua resposta final DEVE seguir esta estrutura em Markdown. N√ÉO adicione nenhum texto ou explica√ß√£o fora deste formato.

    \`\`\`markdown
    [DIAGNOSTICO_START]
    ## Diagn√≥stico do Cen√°rio Atual
    (Um par√°grafo claro e conciso descrevendo o problema ou a situa√ß√£o atual do cliente, com base no que foi informado. Seja t√©cnico, mas direto.)
    [DIAGNOSTICO_END]

    ## üí° Solu√ß√£o Proposta: {T√≠tulo da Solu√ß√£o}
    (Um par√°grafo explicando a l√≥gica da solu√ß√£o projetada, destacando os principais benef√≠cios t√©cnicos e de neg√≥cio e como ela resolve os problemas do diagn√≥stico.)

    ### Simula√ß√£o de Benef√≠cios
    | M√©trica | Cen√°rio Atual | Cen√°rio Proposto | Melhoria Esperada |
    |---|---|---|---|
    | (Ex: Capacidade de Clientes) | (Ex: 500 clientes com instabilidade) | (Ex: 1024 clientes com alta performance) | (Ex: +104% de capacidade com estabilidade) |
    | (Ex: Velocidade M√°xima Ofertada) | (Ex: 100 Mbps) | (Ex: 1 Gbps (GPON) / 10 Gbps (XGS-PON)) | (Ex: Aumento de 10x a 100x na velocidade) |
    | (Ex: Gerenciamento) | (Ex: Descentralizado e manual) | (Ex: Centralizado via DPMS/TAUC) | (Ex: Redu√ß√£o de OPEX e tempo de resolu√ß√£o) |

    ### Produtos Recomendados
    (Apresente os produtos agrupados por categoria. Use sub-cabe√ßalhos para cada categoria.)

    #### Categoria: {Nome da Categoria 1}
    | C√≥digo | Produto Sugerido | Justificativa / Sugest√£o de Uso |
    |---|---|---|
    | (Ex: DS-P8000-X2) | (Ex: OLT Chassi X2 da TP-Link) | (Ex: Ideal para iniciar a opera√ß√£o com alta performance e escalabilidade futura para XGS-PON.) |

    #### Categoria: {Nome da Categoria 2}
    | C√≥digo | Produto Sugerido | Justificativa / Sugest√£o de Uso |
    |---|---|---|
    | (Ex: XPS-9901140) | (Ex: Sistema Retificador XPS SRX 60A) | (Ex: Garante a alimenta√ß√£o cont√≠nua e segura para a OLT e demais equipamentos do rack, evitando paradas.) |

    ## Argumentos Comerciais para o Cliente
    > Com esta arquitetura, voc√™ n√£o apenas resolve seu problema atual de capacidade, mas tamb√©m prepara sua rede para o futuro, podendo oferecer planos de at√© 10 Gbps sem novos grandes investimentos.
    > A solu√ß√£o de energia redundante garante m√°xima disponibilidade, um diferencial crucial para clientes corporativos.
    \`\`\`
`;
            break;
        case AppMode.IMAGE_ADS:
            specificInstruction = `Voc√™ √© um assistente de IA conversacional para gera√ß√£o de imagens.
Sua primeira tarefa √© determinar a inten√ß√£o do usu√°rio a partir da √∫ltima mensagem dele.
1.  Se o usu√°rio deseja gerar uma NOVA imagem (ex: "crie um an√∫ncio para...", "agora em um dia de sol", "adicione um cachorro"), voc√™ DEVE responder APENAS com um objeto JSON v√°lido com a seguinte estrutura: {"intent": "generate", "prompt": "o pedido principal do usu√°rio para a imagem"}. Extraia apenas a ess√™ncia do pedido para o prompt.
2.  Se o usu√°rio est√° fazendo uma pergunta, um coment√°rio ou dando feedback (ex: "por que voc√™ fez isso?", "gostei!", "qual modelo voc√™ est√° usando?"), voc√™ deve responder conversacionalmente como um assistente prestativo em texto simples.
N√ÉO adicione nenhum texto antes ou depois do JSON se sua inten√ß√£o for 'generate'.`;
            break;
    }

    const userKnowledgeContext = getUserKnowledgeContext(options?.userKnowledge);
    // FIX: Use FULL_KNOWLEDGE_BASE_TEXT imported from knowledgeBase.ts
    return `${userKnowledgeContext}\n${SYSTEM_PROMPT}\n${specificInstruction}\n${FULL_KNOWLEDGE_BASE_TEXT}`;
};

const getResponseSchema = (mode: AppMode): object | undefined => {
    switch (mode) {
        case AppMode.PRESENTATION_BUILDER:
            return undefined;
        case AppMode.CONTENT:
            return {
                type: Type.OBJECT,
                properties: {
                    content_type: { type: Type.STRING },
                    title_suggestions: { type: Type.ARRAY, items: { type: Type.STRING } },
                    body: { type: Type.STRING },
                    hashtags: { type: Type.ARRAY, items: { type: Type.STRING } },
                    image_prompt_suggestion: { type: Type.STRING },
                    cta_suggestion: { type: Type.STRING },
                },
                required: ["content_type", "title_suggestions", "body", "hashtags", "image_prompt_suggestion", "cta_suggestion"]
            };
        case AppMode.PAGE:
            return {
              type: Type.OBJECT,
              properties: {
                url: { type: Type.STRING },
                title: { type: Type.STRING },
                meta_description: { type: Type.STRING },
                h1: { type: Type.STRING },
                h2: { type: Type.ARRAY, items: { type: Type.STRING } },
                faqs: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { q: { type: Type.STRING }, a: { type: Type.STRING } } } },
                internal_links: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { anchor: { type: Type.STRING }, target: { type: Type.STRING } } } },
                schema_jsonld: { type: Type.STRING },
                ab_test_meta: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { variant: { type: Type.STRING }, title: { type: Type.STRING }, description: { type: Type.STRING } } } },
                tech_checklist: { type: Type.ARRAY, items: { type: Type.STRING } }
              }
            };
        case AppMode.MARKET_INTEL:
            return {
                type: Type.OBJECT,
                properties: {
                    sales_pitch_summary: { type: Type.STRING },
                    greatek_product_name: { type: Type.STRING },
                    competitor_product_name: { type: Type.STRING },
                    comparison_points: { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { feature: { type: Type.STRING }, greatek: { type: Type.STRING }, competitor: { type: Type.STRING } } } },
                    competitive_advantages: { type: Type.ARRAY, items: { type: Type.STRING } },
                    commercial_arguments: { type: Type.ARRAY, items: { type: Type.STRING } }
                }
            };
        case AppMode.INSTRUCTOR:
            return {
                type: Type.OBJECT,
                properties: {
                    product_name: { type: Type.STRING },
                    key_selling_points: { type: Type.ARRAY, items: { type: Type.STRING } },
                    technical_faq: {
                        type: Type.ARRAY,
                        items: {
                            type: Type.OBJECT,
                            properties: {
                                q: { type: Type.STRING },
                                a: { type: Type.STRING }
                            },
                            required: ["q", "a"]
                        }
                    },
                    knowledge_quiz: {
                        type: Type.ARRAY,
                        items: {
                            type: Type.OBJECT,
                            properties: {
                                question: { type: Type.STRING },
                                options: { type: Type.ARRAY, items: { type: Type.STRING } },
                                correct_answer: { type: Type.STRING },
                                explanation: { type: Type.STRING }
                            },
                            required: ["question", "options", "correct_answer", "explanation"]
                        }
                    }
                },
                required: ["product_name", "key_selling_points", "technical_faq", "knowledge_quiz"]
            };
        default:
            return undefined;
    }
};

const constructHistoryForApi = (messages: Message[]): Content[] => {
    return messages.flatMap(msg => {
        const role = msg.role === 'user' ? 'user' : 'model';
        const parts: Part[] = [];

        if (typeof msg.content === 'string') {
            parts.push({ text: msg.content });
        } else if (msg.content) {
            // Handle specific structured content for history
            if ('imageUrl' in msg.content && 'generatedPrompt' in msg.content) {
                 parts.push({ text: `Gerei uma imagem com o seguinte prompt: "${(msg.content as ImageAdPackage).generatedPrompt}"` });
            } else {
                parts.push({ text: JSON.stringify(msg.content) });
            }
        }
        
        if (msg.attachments) {
            msg.attachments.forEach(att => {
                parts.push({ inlineData: { mimeType: att.type, data: att.data } });
            });
        }
        
        if (parts.length === 0) return [];
        
        return [{ role, parts }];
    });
};

export const generateConversationTitle = async (prompt: string): Promise<string> => {
    const titlePrompt = `Gere um t√≠tulo curto e descritivo (m√°ximo 5 palavras) para uma conversa iniciada com o seguinte prompt: "${prompt}"`;
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: [{ role: 'user', parts: [{ text: titlePrompt }] }],
            config: {
                systemInstruction: "Voc√™ √© um gerador de t√≠tulos concisos."
            }
        });
        return response.text.replace(/["']/g, ""); // Remove quotes
    } catch (error) {
        console.error("Error generating title:", error);
        return "Nova Conversa";
    }
};

export const getTrainingAnalysis = async (transcript: string): Promise<TrainingAnalysisReport> => {
    const systemInstruction = `Voc√™ √© um "Sales Coach" s√™nior, um especialista em treinamento de vendas. Sua tarefa √© analisar a transcri√ß√£o de uma simula√ß√£o de vendas e fornecer um feedback construtivo e detalhado.

**PROCESSO OBRIGAT√ìRIO:**
1.  **An√°lise Cr√≠tica:** Leia toda a transcri√ß√£o, avaliando a performance do vendedor (identificado como 'user') em √°reas como: clareza na comunica√ß√£o, precis√£o t√©cnica, habilidade de contornar obje√ß√µes, poder de persuas√£o e condu√ß√£o da conversa.
2.  **Atribui√ß√£o de Nota:** Com base na sua an√°lise, atribua uma nota de 0 a 10 para a performance geral do vendedor. Seja criterioso.
3.  **Gera√ß√£o de Feedback:** Elabore um relat√≥rio completo.
4.  **Formato de Resposta (JSON OBRIGAT√ìRIO):**
    *   Sua resposta final DEVE SER APENAS um √∫nico objeto JSON v√°lido, sem nenhum texto antes ou depois.
    *   O JSON DEVE seguir esta estrutura estrita:
        {
          "score": "number (A nota de 0 a 10)",
          "summary": "string (Um resumo conciso da performance, em um par√°grafo)",
          "strengths": ["string (Array com 2-3 pontos fortes principais que o vendedor demonstrou)"],
          "areas_for_improvement": ["string (Array com 2-3 √°reas principais onde o vendedor pode melhorar)"],
          "suggested_arguments": [
            {
              "title": "string (T√≠tulo do argumento, ex: 'Foco no Custo Total de Propriedade (TCO)')",
              "explanation": "string (Explica√ß√£o de como o vendedor poderia ter usado este argumento na conversa)"
            }
          ],
          "objection_handling": [
            {
              "objection": "string (A obje√ß√£o espec√≠fica que o cliente levantou, ex: 'Seu produto est√° muito caro.')",
              "suggestion": "string (Uma sugest√£o de resposta ou abordagem para contornar essa obje√ß√£o de forma eficaz)"
            }
          ]
        }`;
    
    const schema = {
        type: Type.OBJECT,
        properties: {
            score: { type: Type.NUMBER },
            summary: { type: Type.STRING },
            strengths: { type: Type.ARRAY, items: { type: Type.STRING } },
            areas_for_improvement: { type: Type.ARRAY, items: { type: Type.STRING } },
            suggested_arguments: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: { title: { type: Type.STRING }, explanation: { type: Type.STRING } },
                    required: ["title", "explanation"]
                }
            },
            objection_handling: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: { objection: { type: Type.STRING }, suggestion: { type: Type.STRING } },
                    required: ["objection", "suggestion"]
                }
            }
        },
        required: ["score", "summary", "strengths", "areas_for_improvement", "suggested_arguments", "objection_handling"]
    };

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: transcript,
        config: {
            systemInstruction,
            responseMimeType: "application/json",
            responseSchema: schema,
        }
    });
    
    return JSON.parse(response.text.trim());
};


export const runGeminiJsonQuery = async (mode: AppMode, history: Message[], signal: AbortSignal, options?: { numberOfSlides?: number; userKnowledge?: KnowledgeBaseProduct[] }): Promise<any> => {
    const systemInstruction = getSystemInstruction(mode, options);
    const schema = getResponseSchema(mode);
    const apiHistory = constructHistoryForApi(history.slice(0, -1));
    const lastMessage = history[history.length - 1];
    
    let contents: Content;
    if (typeof lastMessage.content === 'string') {
        const parts: Part[] = [{ text: lastMessage.content }];
        if (lastMessage.attachments) {
            lastMessage.attachments.forEach(att => {
                parts.push({ inlineData: { mimeType: att.type, data: att.data } });
            });
        }
        contents = { role: 'user', parts };
    } else {
        throw new Error("Invalid content type for JSON query.");
    }

    const config: any = { systemInstruction };
    if (schema) {
        config.responseMimeType = "application/json";
        config.responseSchema = schema;
    } else if (mode === AppMode.PRESENTATION_BUILDER) {
        config.responseMimeType = "application/json";
    }

     if (mode === AppMode.MARKET_INTEL) {
        config.tools = [{ googleSearch: {} }];
        delete config.responseMimeType;
        delete config.responseSchema;
    }

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: [...apiHistory, contents],
        config
    });

    let jsonStr = response.text.trim();
    
    if (config.tools) {
        const jsonMatch = jsonStr.match(/```json\n([\s\S]*?)\n```|({[\s\S]*})|(\[[\s\S]*\])/);
        if (jsonMatch) {
            jsonStr = jsonMatch[1] || jsonMatch[2] || jsonMatch[3];
        }
    }
    
    try {
        const parsedJson = JSON.parse(jsonStr);
        if (response.candidates?.[0]?.groundingMetadata?.groundingChunks) {
            const sources = response.candidates[0].groundingMetadata.groundingChunks
                .filter((chunk: any) => chunk.web)
                .map((chunk: any) => ({
                    uri: chunk.web.uri,
                    title: chunk.web.title,
                }));

             if (mode === AppMode.MARKET_INTEL) {
                parsedJson.competitor_data_sources = sources;
            }
        }
        return parsedJson;
    } catch (e) {
        console.error("JSON parsing failed for content:", jsonStr);
        throw new Error("A IA retornou uma resposta em um formato inv√°lido. Tente novamente.");
    }
};

export async function* streamGeminiQuery(
    mode: AppMode,
    history: Message[],
    signal: AbortSignal,
    options?: { isSpreadsheetAnalysis?: boolean; spreadsheetContent?: string; userKnowledge?: KnowledgeBaseProduct[] }
): AsyncGenerator<string> {
    const systemInstruction = getSystemInstruction(mode, options);
    const apiHistory = constructHistoryForApi(history.slice(0, -1));
    const lastMessage = history[history.length - 1];

    let contents: Content;
    if (typeof lastMessage.content === 'string') {
        const parts: Part[] = [{ text: lastMessage.content }];
        if (lastMessage.attachments) {
            lastMessage.attachments.forEach(att => {
                parts.push({ inlineData: { mimeType: att.type, data: att.data } });
            });
        }
        contents = { role: 'user', parts };
    } else {
        throw new Error("Invalid content type for stream query.");
    }

    const responseStream = await ai.models.generateContentStream({
        model: 'gemini-2.5-flash',
        contents: [...apiHistory, contents],
        config: {
            systemInstruction
        }
    });

    for await (const chunk of responseStream) {
        if (signal.aborted) {
            console.log("Stream aborted by user.");
            break;
        }
        yield chunk.text;
    }
}

const findPartnerData = (prompt: string) => {
    const lowerPrompt = prompt.toLowerCase();
    for (const partner of PARTNER_COMPANIES) {
        if (lowerPrompt.includes(partner.name.toLowerCase())) {
            return partner;
        }
    }
    for (const product of KNOWLEDGE_BASE_PRODUCTS) {
        if (product.keywords.some(kw => lowerPrompt.includes(kw))) {
             for (const partner of PARTNER_COMPANIES) {
                if (product.name.toLowerCase().includes(partner.name.toLowerCase())) {
                    return partner;
                }
             }
        }
    }
    return null;
}

export const generateImageAd = async (prompt: string, attachments?: Attachment[], signal?: AbortSignal): Promise<ImageAdPackage> => {
    const promptEnhancerSystemInstruction = `You are a "Scene Composer" AI, an expert in creating hyper-realistic photography prompts. Your task is to take a subject from a user-provided reference image and place it into a new scene described by the user's text prompt.

**CORE DIRECTIVE: THE SUBJECT IS IMMUTABLE**
- Your primary goal is to treat the main subject from the reference image as a non-modifiable object.
- Think of this as a digital composition task: you are defining a new background and environment for the **exact same subject**.
- **DO NOT RE-IMAGINE THE SUBJECT.** The final image must feature a "digital twin" of the subject, identical in every detail: shape, color, texture, logos, text, unique design patterns, and even lighting reflections on its surface.

**YOUR PROCESS:**
1.  **SUBJECT ANALYSIS:**
    *   Examine the reference image and identify the main subject.
    *   Extract a list of its most critical and unique visual characteristics. Be specific (e.g., "distinctive triangular perforated pattern on top," "two cylindrical antennas," "small green circular LED light on the front bottom-right"). This is for your internal understanding to build the prompt.
2.  **SCENE ANALYSIS:**
    *   Analyze the user's text prompt to understand the desired new background, environment, mood, and any additional elements. The user's text **only defines the scene, not the subject**.
3.  **PROMPT ENGINEERING:**
    *   Combine your analysis into a single, detailed, and commanding prompt **in ENGLISH**.
    *   **Part A: Subject Command & Description:**
        *   Start with a clear command: "Create a photorealistic image of a [product type, e.g., 'white Wi-Fi router'] placed in a new setting. The product must be an **exact visual replica** of the one in the reference image, maintaining all its original features."
        *   Immediately follow with the specific visual details you identified: "Key features to replicate perfectly are its [feature 1, e.g., 'unique triangular perforated top surface'], [feature 2, e.g., 'horizontal slit vents on the sides'], and [feature 3, e.g., 'brand logo on the front']."
    *   **Part B: Scene Description:**
        *   Describe the new scene based on the user's text prompt. Example: "The product is placed on a rustic wooden table, next to a steaming coffee mug."
    *   **Part C: Photographic Style:**
        *   Add professional photography details: "Style: hyperrealistic product photography, 8K, ultra-detailed, sharp focus."
        *   Specify camera and lighting: "Shot on a Canon EOS R5 with a 100mm macro lens, soft and diffused studio lighting to highlight the product's texture."
    *   **Part D: Negative Prompt (Crucial):**
        *   Include a negative prompt to avoid common errors: "--no different product, modified design, altered logo, blurry, deformed, cartoonish"
4.  **ANTI-CROP COMPOSITION:** Critically, ensure the main subject is fully visible and not awkwardly cropped at the edges, regardless of the aspect ratio. Use compositional terms like **"full shot," "wide shot," or "medium shot"**.
5.  **ASPECT RATIO DETERMINATION:**
    *   Your primary goal is to select one of the following supported aspect ratios: **"1:1", "3:4", "4:3", "9:16", "16:9"**.
    *   Analyze the user's prompt for keywords. Use '9:16' for "stories" or "reels", '1:1' for "feed post" or "Instagram post", '16:9' for "banner" or "YouTube thumbnail".
    *   If the user provides specific dimensions (e.g., "1080x1350", "1200x628"), calculate the ratio and choose the **closest available option** from the supported list. For 1080x1350 (a 4:5 ratio), the closest is "3:4". For 1200x628 (a ~1.91:1 ratio), the closest is "16:9".
    *   Default to '1:1' if no specific instructions are found.
6.  **JSON OUTPUT:** Your entire output must be a single, valid JSON object with this exact structure:
    {
      "generatedPrompt": "The detailed, professional English prompt you crafted.",
      "aspectRatio": "The determined aspect ratio string."
    }`;

    const enhancerSchema = {
        type: Type.OBJECT,
        properties: {
            generatedPrompt: { type: Type.STRING },
            aspectRatio: { type: Type.STRING }
        },
        required: ["generatedPrompt", "aspectRatio"]
    };

    const enhancerParts: Part[] = [{ text: prompt }];
    if (attachments && attachments.length > 0) {
        enhancerParts.push({ inlineData: { mimeType: attachments[0].type, data: attachments[0].data } });
    }

    const enhancerResponse = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: { parts: enhancerParts },
        config: {
            systemInstruction: promptEnhancerSystemInstruction,
            responseMimeType: "application/json",
            responseSchema: enhancerSchema,
        }
    });

    let generatedPrompt: string;
    let aspectRatio: '1:1' | '9:16' | '16:9' | '4:3' | '3:4';
    try {
        const parsedResponse = JSON.parse(enhancerResponse.text);
        generatedPrompt = parsedResponse.generatedPrompt;
        const validRatios = ["1:1", "9:16", "16:9", "4:3", "3:4"];
        aspectRatio = validRatios.includes(parsedResponse.aspectRatio) ? parsedResponse.aspectRatio : '1:1';
    } catch (e) {
        console.error("Failed to parse enhancer response, falling back.", e, enhancerResponse.text);
        generatedPrompt = "A photorealistic image of a Greatek partner product in a professional setting."; // Fallback prompt
        aspectRatio = '1:1';
    }

    const imageGenResponse = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: generatedPrompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: aspectRatio,
        },
    });

    const base64ImageBytes: string = imageGenResponse.generatedImages[0].image.imageBytes;
    const imageUrl = `data:image/jpeg;base64,${base64ImageBytes}`;

    let adCopy: AdCopy | undefined = undefined;
    if (prompt.toLowerCase().includes('an√∫ncio')) {
        const adCopySystemInstruction = `Voc√™ √© um copywriter de marketing s√™nior especializado em criar textos para an√∫ncios de redes sociais.
        Sua tarefa √©, com base no pedido original do usu√°rio, gerar um pacote de textos para um an√∫ncio.
        O resultado DEVE ser um JSON v√°lido.
        O JSON deve conter:
        - "headline": Um t√≠tulo principal curto e impactante (m√°x 5 palavras).
        - "description": Uma descri√ß√£o curta do produto ou da oferta (m√°x 15 palavras).
        - "highlights": Um array com EXATAMENTE 3 pontos de destaque curtos (m√°x 3 palavras cada), como "Estoque Limitado", "Descontos Exclusivos", "Condi√ß√µes Especiais".
        - "cta": Um Call-to-Action (chamada para a√ß√£o) claro e direto (m√°x 3 palavras), como "SAIBA MAIS", "COMPRE AGORA".`;
        
        const adCopySchema = {
            type: Type.OBJECT,
            properties: {
                headline: { type: Type.STRING },
                description: { type: Type.STRING },
                highlights: { type: Type.ARRAY, items: { type: Type.STRING } },
                cta: { type: Type.STRING }
            }
        };

        const adCopyResponse = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: `Pedido do usu√°rio: "${prompt}"`,
            config: {
                systemInstruction: adCopySystemInstruction,
                responseMimeType: "application/json",
                responseSchema: adCopySchema,
            }
        });

        try {
            adCopy = JSON.parse(adCopyResponse.text);
        } catch(e) {
            console.error("Failed to parse ad copy JSON:", adCopyResponse.text);
            adCopy = {
                headline: "Oferta Imperd√≠vel",
                description: "A solu√ß√£o que voc√™ precisa com a qualidade que voc√™ confia.",
                highlights: ["Qualidade Garantida", "Pronta Entrega", "Pre√ßo Justo"],
                cta: "Saiba Mais"
            };
        }
    }
    
    const partnerData = adCopy ? findPartnerData(prompt) : null;

    return {
        imageUrl,
        generatedPrompt,
        originalPrompt: prompt,
        adCopy,
        partnerLogoUrl: partnerData?.logoUrl,
        referenceImage: attachments?.[0],
        aspectRatio: aspectRatio
    };
};

export const runImageCompositionQuery = async (baseImage: Attachment, newImage: Attachment, prompt: string, signal?: AbortSignal): Promise<string> => {
    const baseImagePart = {
        inlineData: { data: baseImage.data, mimeType: baseImage.type },
    };
    const newImagePart = {
        inlineData: { data: newImage.data, mimeType: newImage.type },
    };
    const textPart = { text: `Using the first image as the background and main scene, replace the main product in it with the product from the second image. The user's request is: "${prompt}"` };

    const response: GenerateContentResponse = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
            parts: [baseImagePart, newImagePart, textPart],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    if (response.candidates?.[0]?.content?.parts) {
        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                return part.inlineData.data;
            }
        }
        
        let textResponse = '';
        for (const part of response.candidates[0].content.parts) {
            if (part.text) {
                textResponse += part.text;
            }
        }

        if (textResponse) {
            throw new Error(`A IA retornou uma mensagem: "${textResponse.trim()}"`);
        }
    }

    throw new Error('A IA n√£o retornou uma imagem editada. A resposta pode ter sido bloqueada ou est√° em um formato inesperado.');
};

export const runImageEditingQuery = async (base64Data: string, mimeType: string, prompt: string, signal?: AbortSignal): Promise<string> => {
    const imagePart = {
        inlineData: {
            data: base64Data,
            mimeType: mimeType,
        },
    };
    const textPart = { text: prompt };

    const response: GenerateContentResponse = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
            parts: [imagePart, textPart],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    if (response.candidates?.[0]?.content?.parts) {
        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                return part.inlineData.data;
            }
        }
        
        let textResponse = '';
        for (const part of response.candidates[0].content.parts) {
            if (part.text) {
                textResponse += part.text;
            }
        }

        if (textResponse) {
            throw new Error(`A IA retornou uma mensagem: "${textResponse.trim()}"`);
        }
    }

    throw new Error('A IA n√£o retornou uma imagem editada. A resposta pode ter sido bloqueada ou est√° em um formato inesperado.');
};

// START: Training Video Generator Feature
export const generateTrainingScriptAndPrompts = async (productName: string, productDetails: string): Promise<TrainingVideoPackage> => {
    const systemInstruction = `Voc√™ √© um "Produtor de V√≠deos de Treinamento". Sua tarefa √© pegar o nome de um produto e criar um roteiro conciso e did√°tico para um v√≠deo de treinamento de at√© 1 minuto.

**PROCESSO OBRIGAT√ìRIO:**
1.  **An√°lise do Produto:** Com base no nome do produto fornecido pelo usu√°rio ("${productName}"), encontre o produto correspondente na BASE DE CONHECIMENTO e extraia suas informa√ß√µes mais importantes.
2.  **Roteiriza√ß√£o:** Divida o conte√∫do em 3 a 5 se√ß√µes l√≥gicas (ex: Introdu√ß√£o, Principais Caracter√≠sticas, Benef√≠cios, Aplica√ß√£o).
3.  **CONTE√öDO DA NARRA√á√ÉO:** Para CADA se√ß√£o, o "section_text" DEVE ser detalhado e informativo, incluindo **caracter√≠sticas t√©cnicas, diferenciais, vantagens e casos de uso do produto**. A narra√ß√£o deve ser fluida e vendedora, como se fosse para um v√≠deo de treinamento real.
4.  **Cria√ß√£o de Prompts Visuais:** Para CADA se√ß√£o, crie um "visual_prompt". Este prompt deve ser uma descri√ß√£o em INGL√äS para uma IA de gera√ß√£o de v√≠deo (como o VEO) criar um clipe de fundo. O clipe deve ser ABSTRATO, TECNOL√ìGICO e relacionado ao conceito da se√ß√£o, mas NUNCA deve tentar mostrar o produto real.
    *   **Exemplos de BONS prompts visuais:** "An abstract animation of glowing data packets flowing through fiber optic cables, cinematic, 8k, technological background.", "Close-up shot of a technician's hands skillfully connecting wires on a circuit board, clean and modern aesthetic.", "A dynamic motion graphic showing network connection icons expanding to cover a city map, blue and white color scheme."
    *   **Exemplos de MAUS prompts visuais:** "A video of the Greatek Fusion Splicer X6", "Show the product on a table".
5.  **Formato de Resposta (JSON OBRIGAT√ìRIO):**
    *   Sua resposta final DEVE SER APENAS um √∫nico objeto JSON v√°lido.
    *   O JSON DEVE seguir esta estrutura estrita:
        {
          "product_name": "string (O nome oficial do produto encontrado na base de conhecimento)",
          "script": [
            {
              "section_title": "string (T√≠tulo da se√ß√£o, ex: 'O que √©?')",
              "section_text": "string (O texto da narra√ß√£o/legenda para esta se√ß√£o, detalhado e informativo)",
              "visual_prompt": "string (O prompt em INGL√äS para o v√≠deo de fundo, conforme descrito acima)"
            }
          ]
        }`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            product_name: { type: Type.STRING },
            script: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        section_title: { type: Type.STRING },
                        section_text: { type: Type.STRING },
                        visual_prompt: { type: Type.STRING },
                    },
                    required: ["section_title", "section_text", "visual_prompt"],
                },
            },
        },
        required: ["product_name", "script"],
    };

    const userPrompt = `Crie um roteiro de v√≠deo de treinamento para o produto: "${productName}".`;

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: userPrompt,
        config: {
            systemInstruction,
            responseMimeType: "application/json",
            responseSchema: schema,
        },
    });
    
    return JSON.parse(response.text.trim());
};

export const generateVideo = async (prompt: string): Promise<Blob> => {
    let operation = await ai.models.generateVideos({
        model: 'veo-2.0-generate-001',
        prompt: prompt,
        config: { numberOfVideos: 1 }
    });

    while (!operation.done) {
        await new Promise(resolve => setTimeout(resolve, 10000));
        operation = await ai.operations.getVideosOperation({ operation: operation });
    }

    if (operation.error) {
        const errorMessage = `A gera√ß√£o de v√≠deo falhou. Motivo: ${operation.error.message} (C√≥digo: ${operation.error.code})`;
        throw new Error(errorMessage);
    }

    const downloadLink = operation.response?.generatedVideos?.[0]?.video?.uri;
    if (!downloadLink) {
        throw new Error("A gera√ß√£o de v√≠deo falhou ou n√£o retornou um link para download.");
    }
    
    if (!process.env.API_KEY) {
        throw new Error("API Key n√£o encontrada para baixar o v√≠deo.");
    }

    const videoResponse = await fetch(`${downloadLink}&key=${process.env.API_KEY}`);
    if (!videoResponse.ok) {
        throw new Error(`Falha ao baixar o v√≠deo gerado. Status: ${videoResponse.status}`);
    }

    return await videoResponse.blob();
};
// END: Training Video Generator Feature